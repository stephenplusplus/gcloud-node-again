[
  {
    "tags": [],
    "description": {
      "full": "<p>Copyright 2014 Google Inc. All Rights Reserved.</p><p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>",
      "summary": "<p>Copyright 2014 Google Inc. All Rights Reserved.</p>",
      "body": "<p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>"
    },
    "isPrivate": false,
    "ignore": true
  },
  {
    "tags": [],
    "description": {
      "full": "<p>@module pubsub/topic</p>",
      "summary": "<p>@module pubsub/topic</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": true,
    "code": "'use strict';"
  },
  {
    "tags": [
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>@type module:common/util</p>",
      "summary": "<p>@type module:common/util</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var util = require('../common/util.js');",
    "ctx": {
      "type": "declaration",
      "name": "util",
      "value": "require('../common/util.js')",
      "string": "util"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>@type module:pubsub/subscription</p>",
      "summary": "<p>@type module:pubsub/subscription</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var Subscription = require('./subscription.js');",
    "ctx": {
      "type": "declaration",
      "name": "Subscription",
      "value": "require('./subscription.js')",
      "string": "Subscription"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "module:pubsub"
        ],
        "name": "pubsub",
        "description": "- PubSub object."
      },
      {
        "type": "param",
        "types": [
          "object"
        ],
        "name": "options",
        "description": "- Configuration object."
      },
      {
        "type": "param",
        "types": [
          "string"
        ],
        "name": "options.name",
        "description": "- Name of the topic."
      }
    ],
    "description": {
      "full": "<p>Developer Documentation</p>",
      "summary": "<p>Developer Documentation</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": true
  },
  {
    "tags": [
      {
        "type": "constructor",
        "string": ""
      },
      {
        "type": "alias",
        "string": "module:pubsub/topic "
      },
      {
        "type": "example",
        "string": "// From pubsub.topic:\nvar topic = pubsub.topic('my-existing-topic');\n\n// From pubsub.createTopic:\npubsub.createTopic('my-new-topic', function(err, topic) {\n  // `topic` is a Topic object.\n});"
      }
    ],
    "description": {
      "full": "<p>A Topic object allows you to interact with a Google Cloud Pub/Sub topic. To<br />get this object, you will use the methods on the <code>pubsub</code> object,<br />{@linkcode module:pubsub#topic} and {@linkcode module:pubsub#createTopic}.</p>",
      "summary": "<p>A Topic object allows you to interact with a Google Cloud Pub/Sub topic. To<br />get this object, you will use the methods on the <code>pubsub</code> object,<br />{@linkcode module:pubsub#topic} and {@linkcode module:pubsub#createTopic}.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "function Topic(pubsub, options) {\n  this.name = Topic.formatName_(pubsub.projectId, options.name);\n  this.projectId = pubsub.projectId;\n  this.pubsub = pubsub;\n  this.request = pubsub.makeReq_.bind(pubsub);\n}",
    "ctx": {
      "type": "function",
      "name": "Topic",
      "string": "Topic()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "visibility": "private"
      },
      {
        "type": "return",
        "types": [
          "string"
        ],
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Format the name of a topic. A Topic&#39;s full name is in the format of<br />/topics/{projectId}/{name}.</p>",
      "summary": "<p>Format the name of a topic. A Topic&#39;s full name is in the format of<br />/topics/{projectId}/{name}.</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "Topic.formatName_ = function(projectId, name) {\n  // Simple check if the name is already formatted.\n  if (name.indexOf('/') > -1) {\n    return name;\n  }\n  return '/topics/' + projectId + '/' + name;\n};",
    "ctx": {
      "type": "method",
      "receiver": "Topic",
      "name": "formatName_",
      "string": "Topic.formatName_()"
    }
  },
  {
    "tags": [
      {
        "type": "throws",
        "types": [
          "Error"
        ],
        "description": "If no message is provided. "
      },
      {
        "type": "param",
        "types": [
          "*"
        ],
        "name": "message",
        "description": "- The message to publish."
      },
      {
        "type": "param",
        "types": [
          "function="
        ],
        "name": "callback",
        "description": "- The callback function. "
      },
      {
        "type": "example",
        "string": "topic.publish('New message!', function(err) {});\n\ntopic.publish({\n  user_id: 3,\n  name: 'Stephen',\n  message: 'Hello from me!'\n}, function(err) {});"
      }
    ],
    "description": {
      "full": "<p>Publish the provided message. A message can be of any type.</p>",
      "summary": "<p>Publish the provided message. A message can be of any type.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "Topic.prototype.publish = function(message, callback) {\n  if (!message) {\n    throw new Error('Cannot publish an empty message.');\n  }\n  callback = callback || util.noop;\n  if (!util.is(message, 'string') && !util.is(message, 'buffer')) {\n    message = JSON.stringify(message);\n  }\n  this.publishRaw({\n    data: new Buffer(message).toString('base64')\n  }, callback);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Topic",
      "cons": "Topic",
      "name": "publish",
      "string": "Topic.prototype.publish()"
    }
  },
  {
    "tags": [
      {
        "type": "throws",
        "types": [
          "Error"
        ],
        "description": "If no message is provided. "
      },
      {
        "type": "param",
        "types": [
          "object"
        ],
        "name": "message",
        "description": "- Raw message to publish."
      },
      {
        "type": "param",
        "types": [
          "array="
        ],
        "name": "message.label",
        "description": "- List of labels for the message."
      },
      {
        "type": "param",
        "types": [
          "*"
        ],
        "name": "message.data",
        "description": "- The contents of the message."
      },
      {
        "type": "param",
        "types": [
          "function="
        ],
        "name": "callback",
        "description": "- The callback function. "
      },
      {
        "type": "example",
        "string": "topic.publishRaw({\n  data: new Buffer('New message!').toString('base64')\n}, function(err) {});"
      }
    ],
    "description": {
      "full": "<p>Publish a raw message.</p>",
      "summary": "<p>Publish a raw message.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "Topic.prototype.publishRaw = function(message, callback) {\n  if (!message) {\n    throw new Error('Cannot publish an empty message.');\n  }\n  callback = callback || util.noop;\n  if (!util.is(message.data, 'string') && !util.is(message.data, 'buffer')) {\n    message.data = new Buffer(JSON.stringify(message.data)).toString('base64');\n  }\n  message.topic = this.name;\n  this.request('POST', 'topics/publish', null, message, callback);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Topic",
      "cons": "Topic",
      "name": "publishRaw",
      "string": "Topic.prototype.publishRaw()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "function="
        ],
        "name": "callback",
        "description": "- The callback function. "
      },
      {
        "type": "example",
        "string": "topic.delete(function(err) {});"
      }
    ],
    "description": {
      "full": "<p>Delete the topic.</p>",
      "summary": "<p>Delete the topic.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "Topic.prototype.delete = function(callback) {\n  callback = callback || util.noop;\n  this.request('DELETE', 'topics/' + this.name, null, true, callback);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Topic",
      "cons": "Topic",
      "name": "delete",
      "string": "Topic.prototype.delete()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "object="
        ],
        "name": "query",
        "description": "- Query object."
      },
      {
        "type": "param",
        "types": [
          "string="
        ],
        "name": "query.pageToken",
        "description": "- Page token."
      },
      {
        "type": "param",
        "types": [
          "number="
        ],
        "name": "query.maxResults",
        "description": "- Maximum number of results to return."
      },
      {
        "type": "param",
        "types": [
          "function"
        ],
        "name": "callback",
        "description": "- The callback function. "
      },
      {
        "type": "example",
        "string": "// Get all subscriptions.\ntopic.getSubscriptions(function(err, subscriptions, nextQuery) {\n  // If `nextQuery` is non-null, there may be more results to fetch. To do\n  // so, run `topic.getSubscriptions(nextQuery, callback);`.\n});\n\n// Customize the query.\ntopic.getSubscriptions({\n  maxResults: 3\n}, function(err, subscriptions, nextQuery) {});"
      }
    ],
    "description": {
      "full": "<p>Get a list of the subscriptions registered to this topic. You may optionally<br />provide a query object as the first argument to customize the response.</p><p>Your provided callback will either be invoked with an error object, if an API<br />error occurred, or an array of {@linkcode module:pubsub/subscription}<br />objects.</p>",
      "summary": "<p>Get a list of the subscriptions registered to this topic. You may optionally<br />provide a query object as the first argument to customize the response.</p>",
      "body": "<p>Your provided callback will either be invoked with an error object, if an API<br />error occurred, or an array of {@linkcode module:pubsub/subscription}<br />objects.</p>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "Topic.prototype.getSubscriptions = function(query, callback) {\n  query.query = 'pubsub.googleapis.com/topic in (' + this.name + ')';\n  this.pubsub.getSubscriptions(query, callback);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Topic",
      "cons": "Topic",
      "name": "getSubscriptions",
      "string": "Topic.prototype.getSubscriptions()"
    }
  },
  {
    "tags": [
      {
        "type": "throws",
        "types": [
          "Error"
        ],
        "description": "If a name is not provided. "
      },
      {
        "type": "param",
        "types": [
          "string"
        ],
        "name": "name",
        "description": "- The name of the subscription."
      },
      {
        "type": "param",
        "types": [
          "object="
        ],
        "name": "options",
        "description": "- Configuration object."
      },
      {
        "type": "param",
        "types": [
          "number="
        ],
        "name": "options.ackDeadlineSeconds",
        "description": "- The maximum time after     receiving a message that you must ack a message before it is redelivered."
      },
      {
        "type": "param",
        "types": [
          "boolean="
        ],
        "name": "options.autoAck",
        "description": "- Automatically acknowledge the message     once it's pulled. (default: false)"
      },
      {
        "type": "param",
        "types": [
          "number="
        ],
        "name": "options.interval",
        "description": "- Interval in milliseconds to check for new     messages. (default: 10)"
      },
      {
        "type": "param",
        "types": [
          "function"
        ],
        "name": "callback",
        "description": "- The callback function. "
      },
      {
        "type": "example",
        "string": "// Without specifying any options.\ntopic.subscribe('new-subscription', function(err, subscription) {});\n\n// With options.\ntopic.subscribe('new-subscription', {\n  ackDeadlineSeconds: 90,\n  autoAck: true,\n  interval: 30\n}, function(err, subscription) {});"
      }
    ],
    "description": {
      "full": "<p>Create a subscription to this topic. You may optionally provide an object to<br />customize the subscription.</p><p>Your provided callback will either be invoked with an error object, if an API<br />error occurred, or a {@linkcode module:pubsub/subscription} object.</p>",
      "summary": "<p>Create a subscription to this topic. You may optionally provide an object to<br />customize the subscription.</p>",
      "body": "<p>Your provided callback will either be invoked with an error object, if an API<br />error occurred, or a {@linkcode module:pubsub/subscription} object.</p>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "Topic.prototype.subscribe = function(name, options, callback) {\n  if (!name) {\n    throw new Error('A name is required for a new subscription.');\n  }\n  if (!callback) {\n    callback = options;\n    options = {};\n  }\n  var body = {\n    topic: this.name,\n    name: Subscription.formatName_(this.projectId, name)\n  };\n  if (options.ackDeadlineSeconds) {\n    body.ackDeadlineSeconds = options.ackDeadlineSeconds;\n  }\n  this.request('POST', 'subscriptions', null, body, function(err) {\n    if (err) {\n      callback(err);\n      return;\n    }\n    callback(null, this.subscription(name, options));\n  }.bind(this));\n};",
    "ctx": {
      "type": "method",
      "constructor": "Topic",
      "cons": "Topic",
      "name": "subscribe",
      "string": "Topic.prototype.subscribe()"
    }
  },
  {
    "tags": [
      {
        "type": "throws",
        "types": [
          "Error"
        ],
        "description": "If a name is not provided. "
      },
      {
        "type": "param",
        "types": [
          "string"
        ],
        "name": "name",
        "description": "- Name of the subscription."
      },
      {
        "type": "param",
        "types": [
          "object="
        ],
        "name": "options",
        "description": "- Configuration object."
      },
      {
        "type": "param",
        "types": [
          "boolean="
        ],
        "name": "options.autoAck",
        "description": "- Automatically acknowledge the message     once it's pulled."
      },
      {
        "type": "param",
        "types": [
          "number="
        ],
        "name": "options.interval",
        "description": "- Interval in milliseconds to check for new     messages."
      },
      {
        "type": "return",
        "types": [
          "module:pubsub",
          "subscription"
        ],
        "description": ""
      },
      {
        "type": "example",
        "string": "var subscription = topic.subscription('my-existing-subscription');\n\n// Register a listener for `message` events.\nsubscription.on('message', function(message) {\n  // Called every time a message is received.\n  // message.id = ID used to acknowledge its receival.\n  // message.data = Contents of the message.\n});"
      }
    ],
    "description": {
      "full": "<p>Create a Subscription object in reference to an existing subscription. This<br />command by itself will not run any API requests. You will receive a<br />{@linkcode module:pubsub/subscription} object, which will allow you to<br />interact with your subscription.</p>",
      "summary": "<p>Create a Subscription object in reference to an existing subscription. This<br />command by itself will not run any API requests. You will receive a<br />{@linkcode module:pubsub/subscription} object, which will allow you to<br />interact with your subscription.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "Topic.prototype.subscription = function(name, options) {\n  if (!name) {\n    throw new Error('The name of a subscription is required.');\n  }\n  options = options || {};\n  options.name = name;\n  return new Subscription(this.pubsub, options);\n};\n\nmodule.exports = Topic;",
    "ctx": {
      "type": "method",
      "constructor": "Topic",
      "cons": "Topic",
      "name": "subscription",
      "string": "Topic.prototype.subscription()"
    }
  }
]