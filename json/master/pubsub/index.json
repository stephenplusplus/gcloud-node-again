[
  {
    "tags": [],
    "description": {
      "full": "<p>Copyright 2014 Google Inc. All Rights Reserved.</p><p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>",
      "summary": "<p>Copyright 2014 Google Inc. All Rights Reserved.</p>",
      "body": "<p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>"
    },
    "isPrivate": false,
    "ignore": true
  },
  {
    "tags": [],
    "description": {
      "full": "<p>@module pubsub</p>",
      "summary": "<p>@module pubsub</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": true,
    "code": "'use strict';"
  },
  {
    "tags": [
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>@type module:common/connection</p>",
      "summary": "<p>@type module:common/connection</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var conn = require('../common/connection.js');",
    "ctx": {
      "type": "declaration",
      "name": "conn",
      "value": "require('../common/connection.js')",
      "string": "conn"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>@type module:pubsub/subscription</p>",
      "summary": "<p>@type module:pubsub/subscription</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var Subscription = require('./subscription.js');",
    "ctx": {
      "type": "declaration",
      "name": "Subscription",
      "value": "require('./subscription.js')",
      "string": "Subscription"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>@type module:pubsub/topic</p>",
      "summary": "<p>@type module:pubsub/topic</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var Topic = require('./topic.js');",
    "ctx": {
      "type": "declaration",
      "name": "Topic",
      "value": "require('./topic.js')",
      "string": "Topic"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>@type module:common/util</p>",
      "summary": "<p>@type module:common/util</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var util = require('../common/util.js');",
    "ctx": {
      "type": "declaration",
      "name": "util",
      "value": "require('../common/util.js')",
      "string": "util"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>@const {string} Base URL for Pub/Sub API.</p>",
      "summary": "<p>@const {string} Base URL for Pub/Sub API.</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var PUBSUB_BASE_URL = 'https://www.googleapis.com/pubsub/v1beta1';",
    "ctx": {
      "type": "declaration",
      "name": "PUBSUB_BASE_URL",
      "value": "'https://www.googleapis.com/pubsub/v1beta1'",
      "string": "PUBSUB_BASE_URL"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>@const {array} Required scopes for Pub/Sub API.</p>",
      "summary": "<p>@const {array} Required scopes for Pub/Sub API.</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var SCOPES = [\n  'https://www.googleapis.com/auth/pubsub',\n  'https://www.googleapis.com/auth/cloud-platform'\n];",
    "ctx": {
      "type": "declaration",
      "name": "SCOPES",
      "value": "[",
      "string": "SCOPES"
    }
  },
  {
    "tags": [
      {
        "type": "constructor",
        "string": ""
      },
      {
        "type": "alias",
        "string": "module:pubsub "
      },
      {
        "type": "param",
        "types": [
          "object="
        ],
        "name": "options",
        "description": "- Configuration object."
      },
      {
        "type": "param",
        "types": [
          "string="
        ],
        "name": "options.projectId",
        "description": "- Google Developers Console Project ID."
      },
      {
        "type": "param",
        "types": [
          "string="
        ],
        "name": "options.keyFilename",
        "description": "- Full path to the JSON key downloaded     from the Google Developers Console. Alternatively, you may provide a\n    `credentials` object."
      },
      {
        "type": "param",
        "types": [
          "object="
        ],
        "name": "options.credentials",
        "description": "- Credentials object, used in place of     a `keyFilename`.\n"
      },
      {
        "type": "example",
        "string": "var gcloud = require('gcloud');\n\n// From Google Compute Engine and Google App Engine:\n\n// Access `pubsub` through the `gcloud` module directly.\nvar pubsub = gcloud.pubsub();\n\n// Elsewhere:\n\n// Provide configuration details up-front.\nvar myProject = gcloud({\n  keyFilename: '/path/to/keyfile.json',\n  projectId: 'my-project'\n});\n\nvar pubsub = myProject.pubsub();\n\n\n// Override default configuration details.\nvar anotherPubsubConnection = myProject.pubsub({\n  keyFilename: '/path/to/another/keyfile.json',\n});\n\n\n// Specify all options at instantiation.\nvar pubsub = gcloud.pubsub({\n  keyFilename: '/path/to/keyfile.json',\n  projectId: 'my-project'\n});"
      }
    ],
    "description": {
      "full": "<p><strong>Experimental</strong></p><p>[Google Cloud Pub/Sub]{@link <a href=\"https://developers.google.com/pubsub/overview}\">https://developers.google.com/pubsub/overview}</a><br />is a reliable, many-to-many, asynchronous messaging service from Google<br />Cloud Platform.</p><p>Note: Google Cloud Pub/Sub API is available as a Limited Preview and the<br />client library we provide is currently experimental. The API and/or the<br />client might be changed in backward-incompatible ways. This API is not<br />subject to any SLA or deprecation policy. Request to be whitelisted to use<br />it by filling the<br />[Limited Preview application form]{@link <a href=\"http://goo.gl/sO0wTu}\">http://goo.gl/sO0wTu}</a>.</p>",
      "summary": "<p><strong>Experimental</strong></p>",
      "body": "<p>[Google Cloud Pub/Sub]{@link <a href=\"https://developers.google.com/pubsub/overview}\">https://developers.google.com/pubsub/overview}</a><br />is a reliable, many-to-many, asynchronous messaging service from Google<br />Cloud Platform.</p><p>Note: Google Cloud Pub/Sub API is available as a Limited Preview and the<br />client library we provide is currently experimental. The API and/or the<br />client might be changed in backward-incompatible ways. This API is not<br />subject to any SLA or deprecation policy. Request to be whitelisted to use<br />it by filling the<br />[Limited Preview application form]{@link <a href=\"http://goo.gl/sO0wTu}\">http://goo.gl/sO0wTu}</a>.</p>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "function PubSub(options) {\n  options = options || {};\n\n  this.connection = new conn.Connection({\n    credentials: options.credentials,\n    keyFilename: options.keyFilename,\n    scopes: SCOPES\n  });\n  this.projectId = options.projectId;\n  this.projectName = '/projects/' + this.projectId;\n}",
    "ctx": {
      "type": "function",
      "name": "PubSub",
      "string": "PubSub()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "object="
        ],
        "name": "query",
        "description": "- Query object."
      },
      {
        "type": "param",
        "types": [
          "string="
        ],
        "name": "query.pageToken",
        "description": "- Page token."
      },
      {
        "type": "param",
        "types": [
          "number="
        ],
        "name": "query.maxResults",
        "description": "- Maximum number of results to return."
      },
      {
        "type": "param",
        "types": [
          "function"
        ],
        "name": "callback",
        "description": "- The callback function. "
      },
      {
        "type": "example",
        "string": "// Get all topics.\npubsub.getTopics(function(err, topics, nextQuery) {\n  // If `nextQuery` is non-null, there may be more results to fetch. To do\n  // so, run `pubsub.getTopics(nextQuery, callback);`.\n});\n\n// Customize the query.\npubsub.getTopics({\n  maxResults: 3\n}, function(err, topics, nextQuery) {});"
      }
    ],
    "description": {
      "full": "<p>Get a list of the topics registered to your project. You may optionally<br />provide a query object as the first argument to customize the response.</p>",
      "summary": "<p>Get a list of the topics registered to your project. You may optionally<br />provide a query object as the first argument to customize the response.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "PubSub.prototype.getTopics = function(query, callback) {\n  var that = this;\n  if (!callback) {\n    callback = query;\n    query = {};\n  }\n  query.query = 'cloud.googleapis.com/project in (' + this.projectName + ')';\n  this.makeReq_('GET', 'topics', query, true, function(err, result) {\n    if (err) {\n      callback(err);\n      return;\n    }\n    var topics = (result.topic || []).map(function(item) {\n      return new Topic(that, {\n        name: item.name\n      });\n    });\n    var nextQuery = null;\n    if (result.nextPageToken) {\n      nextQuery = query;\n      nextQuery.pageToken = result.nextPageToken;\n    }\n    callback(null, topics, nextQuery);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "PubSub",
      "cons": "PubSub",
      "name": "getTopics",
      "string": "PubSub.prototype.getTopics()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "string"
        ],
        "name": "name",
        "description": "- Name of the topic."
      },
      {
        "type": "param",
        "types": [
          "function="
        ],
        "name": "callback",
        "description": "- The callback function. "
      },
      {
        "type": "example",
        "string": "pubsub.createTopic('my-new-topic', function(err, topic) {\n  topic.publish('New message!', function(err) {});\n});"
      }
    ],
    "description": {
      "full": "<p>Create a topic with the given name.</p>",
      "summary": "<p>Create a topic with the given name.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "PubSub.prototype.createTopic = function(name, callback) {\n  callback = callback || util.noop;\n  var topic = this.topic(name);\n  var req = {\n    name: topic.name\n  };\n  this.makeReq_('POST', 'topics', null, req, function(err) {\n    if (err) {\n      callback(err);\n      return;\n    }\n    callback(null, topic);\n  }.bind(this));\n};",
    "ctx": {
      "type": "method",
      "constructor": "PubSub",
      "cons": "PubSub",
      "name": "createTopic",
      "string": "PubSub.prototype.createTopic()"
    }
  },
  {
    "tags": [
      {
        "type": "throws",
        "types": [
          "Error"
        ],
        "description": "If a name is not provided. "
      },
      {
        "type": "param",
        "types": [
          "string"
        ],
        "name": "name",
        "description": "- The name of the topic."
      },
      {
        "type": "return",
        "types": [
          "module:pubsub",
          "topic"
        ],
        "description": ""
      },
      {
        "type": "example",
        "string": "var topic = pubsub.topic('my-existing-topic');\ntopic.publish('New message!');"
      }
    ],
    "description": {
      "full": "<p>Create a Topic object to reference an existing topic.</p>",
      "summary": "<p>Create a Topic object to reference an existing topic.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "PubSub.prototype.topic = function(name) {\n  if (!name) {\n    throw new Error('A name must be specified for a new topic.');\n  }\n  return new Topic(this, {\n    name: name\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "PubSub",
      "cons": "PubSub",
      "name": "topic",
      "string": "PubSub.prototype.topic()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "object="
        ],
        "name": "query",
        "description": "- Query object."
      },
      {
        "type": "param",
        "types": [
          "string="
        ],
        "name": "query.pageToken",
        "description": "- Page token."
      },
      {
        "type": "param",
        "types": [
          "number="
        ],
        "name": "query.maxResults",
        "description": "- Maximum number of results to return."
      },
      {
        "type": "param",
        "types": [
          "function"
        ],
        "name": "callback",
        "description": "- The callback function. "
      },
      {
        "type": "example",
        "string": "// Get all subscriptions.\npubsub.getSubscriptions(function(err, subscriptions, nextQuery) {\n  // If `nextQuery` is non-null, there may be more results to fetch. To do\n  // so, run `pubsub.getSubscriptions(nextQuery, callback);`.\n});\n\n// Customize the query.\npubsub.getSubscriptions({\n  maxResults: 10\n}, function(err, subscriptions, nextQuery) {});"
      }
    ],
    "description": {
      "full": "<p>Get a list of the subscriptions registered to all of your project&#39;s topics.<br />You may optionally provide a query object as the first argument to customize<br />the response.</p>",
      "summary": "<p>Get a list of the subscriptions registered to all of your project&#39;s topics.<br />You may optionally provide a query object as the first argument to customize<br />the response.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "PubSub.prototype.getSubscriptions = function(query, callback) {\n  var that = this;\n  if (!callback) {\n    callback = query;\n    query = {};\n  }\n  if (!query.query) {\n    query.query = 'cloud.googleapis.com/project in (' + this.projectName + ')';\n  }\n  this.makeReq_('GET', 'subscriptions', query, true, function(err, result) {\n    if (err) {\n      callback(err);\n      return;\n    }\n    var subscriptions = (result.subscription || []).map(function(item) {\n      return new Subscription(that, {\n        name: item.name\n      });\n    });\n    var nextQuery = null;\n    if (result.nextPageToken) {\n      nextQuery = query;\n      nextQuery.pageToken = result.nextPageToken;\n    }\n    callback(null, subscriptions, nextQuery);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "PubSub",
      "cons": "PubSub",
      "name": "getSubscriptions",
      "string": "PubSub.prototype.getSubscriptions()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "visibility": "private"
      },
      {
        "type": "param",
        "types": [
          "string"
        ],
        "name": "method",
        "description": "- Action."
      },
      {
        "type": "param",
        "types": [
          "string"
        ],
        "name": "path",
        "description": "- Request path."
      },
      {
        "type": "param",
        "types": [
          "*"
        ],
        "name": "query",
        "description": "- Request query object."
      },
      {
        "type": "param",
        "types": [
          "*"
        ],
        "name": "body",
        "description": "- Request body contents."
      },
      {
        "type": "param",
        "types": [
          "function"
        ],
        "name": "callback",
        "description": "- The callback function."
      }
    ],
    "description": {
      "full": "<p>Make a new request object from the provided arguments and wrap the callback<br />to intercept non-successful responses.</p>",
      "summary": "<p>Make a new request object from the provided arguments and wrap the callback<br />to intercept non-successful responses.</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "PubSub.prototype.makeReq_ = function(method, path, q, body, callback) {\n  var reqOpts = {\n    method: method,\n    qs: q,\n    uri: PUBSUB_BASE_URL + '/' + path\n  };\n  if (body) {\n    reqOpts.json = body;\n  }\n  this.connection.req(reqOpts, function(err, res, body) {\n    util.handleResp(err, res, body, callback);\n  });\n};\n\nmodule.exports = PubSub;",
    "ctx": {
      "type": "method",
      "constructor": "PubSub",
      "cons": "PubSub",
      "name": "makeReq_",
      "string": "PubSub.prototype.makeReq_()"
    }
  }
]